import random
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

from db import DB

db = DB()

STATE_AWAITING_ACTION = 'awaiting_action'
STATE_ADDING_WORD = 'adding_word'
STATE_DELETING_WORD = 'deleting_word'
STATE_SHOWING_WORDS = 'showing_words'


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['state'] = STATE_AWAITING_ACTION

    keyboard_old_user = [[InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üìù', callback_data='old_user')]]
    keyboard_new_user = [[InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üìù', callback_data='new_user')]]
    markup_old_user = InlineKeyboardMarkup(keyboard_old_user)
    markup_new_user = InlineKeyboardMarkup(keyboard_new_user)

    if db.get_user(update.effective_user.id) is None:
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}üëã.\n '
                                        f'–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.'
                                        f'–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.'
                                        f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n'
                                        f'–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
                                        f'—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n'
                                        f'–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è', reply_markup=markup_new_user)
    else:
        await update.message.reply_text(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {update.effective_user.first_name}üëã.\n'
                                        f'–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ',
                                        reply_markup=markup_old_user)


async def new_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    try:
        await db.new_user(update.effective_user.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await show_words(update, context)


async def old_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_words(update, context)


async def show_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = STATE_AWAITING_ACTION

    words = db.trainer(update.effective_user.id)
    if not words:
        keyboard = [['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', '–ú–æ–π —Å–ª–æ–≤–∞—Ä—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await send_message(update, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.",
                           reply_markup=reply_markup)
        return

    keyword = [[word[0] for word in words],
               ['–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', '–ú–æ–π —Å–ª–æ–≤–∞—Ä—å', '–î–∞–ª—å—à–µ']]
    random.shuffle(keyword[0])
    ru_words = words[0][1]

    context.user_data['current_word'] = words[0][0]
    context.user_data['current_translation'] = "".join(ru_words)
    context.user_data['all_words'] = words

    reply_markup = ReplyKeyboardMarkup(keyword, resize_keyboard=True, one_time_keyboard=True)
    await send_message(
        update,
        f'–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ {"".join(ru_words)}',
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'state' not in context.user_data:
        context.user_data['state'] = STATE_AWAITING_ACTION

    state = context.user_data['state']
    text = update.message.text

    if state == STATE_AWAITING_ACTION:
        if text == '–î–∞–ª—å—à–µ':
            await show_words(update, context)
        elif text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ':
            context.user_data['state'] = STATE_ADDING_WORD
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n"
                                            "–ù–∞–ø—Ä–∏–º–µ—Ä: apple - —è–±–ª–æ–∫–æ")
        elif text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ':
            context.user_data['state'] = STATE_DELETING_WORD
            await prepare_delete_word(update, context)
        elif text == '–ú–æ–π —Å–ª–æ–≤–∞—Ä—å':
            context.user_data['state'] = STATE_SHOWING_WORDS
            await show_personal_dictionary(update, context)
        elif text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É':
            await show_words(update, context)
        else:
            await handle_word_selection(update, context)

    elif state == STATE_ADDING_WORD:
        await add_word(update, context)

    elif state == STATE_DELETING_WORD:
        await delete_word(update, context)

    elif state == STATE_SHOWING_WORDS:
        await dictionary_actions(update, context)


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == 'new_user':
        await new_user(update, context)
    elif data == 'old_user':
        await old_user(update, context)


async def handle_word_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_word = update.message.text

    if 'current_word' in context.user_data:
        correct_word = context.user_data['current_word']
        translation = context.user_data['current_translation']

        if selected_word == correct_word:

            await update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {selected_word} - {translation}")

            await show_words(update, context)
        else:

            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word} - {translation}")

            keyboard = [['–î–∞–ª—å—à–µ']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ'", reply_markup=reply_markup)


async def prepare_delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    personal_words = db.get_personal_words(update.effective_user.id)

    if not personal_words:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.")
        context.user_data['state'] = STATE_AWAITING_ACTION
        await show_words(update, context)
        return

    keyboard = []
    for en_word, ru_word in personal_words:
        keyboard.append([f"{en_word} - {ru_word}"])
    keyboard.append(['–û—Ç–º–µ–Ω–∞'])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)


async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word_text = update.message.text

    if word_text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data['state'] = STATE_AWAITING_ACTION
        await show_words(update, context)
        return

    match = re.match(r'^([a-zA-Z\s]+)\s*-\s*([–∞-—è–ê-–Ø—ë–Å\s]+)$', word_text)

    if not match:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥")
        return

    en_word = match.group(1).strip().lower()
    ru_word = match.group(2).strip().lower()

    success = db.add_personal_word(update.effective_user.id, en_word, ru_word)

    if success:
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{en_word} - {ru_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!")
    else:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    context.user_data['state'] = STATE_AWAITING_ACTION
    await show_words(update, context)


async def delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word_text = update.message.text

    if word_text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data['state'] = STATE_AWAITING_ACTION
        await show_words(update, context)
        return

    match = re.match(r'^([a-zA-Z\s]+)\s*-\s*([–∞-—è–ê-–Ø—ë–Å\s]+)$', word_text)

    if not match:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        context.user_data['state'] = STATE_AWAITING_ACTION
        await show_words(update, context)
        return

    en_word = match.group(1).strip().lower()

    success = db.delete_personal_word(update.effective_user.id, en_word)

    if success:
        await update.message.reply_text(f"üóëÔ∏è –°–ª–æ–≤–æ '{en_word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

    context.user_data['state'] = STATE_AWAITING_ACTION
    await show_words(update, context)


async def show_personal_dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    personal_words = db.get_personal_words(update.effective_user.id)

    if not personal_words:
        await update.message.reply_text("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
    else:
        message = "üìö –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:\n\n"
        for i, (en_word, ru_word) in enumerate(personal_words, 1):
            message += f"{i}. {en_word} - {ru_word}\n"

        await update.message.reply_text(message)

    keyboard = [['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def dictionary_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text

    if action == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É':
        context.user_data['state'] = STATE_AWAITING_ACTION
        await show_words(update, context)
    elif action == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ':
        context.user_data['state'] = STATE_ADDING_WORD
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥")
    elif action == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ':
        context.user_data['state'] = STATE_DELETING_WORD
        await prepare_delete_word(update, context)


async def send_message(update: Update, text: str, reply_markup=None):
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def main():
    app = ApplicationBuilder().token("token").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    app.run_polling()


if __name__ == '__main__':
    main()
